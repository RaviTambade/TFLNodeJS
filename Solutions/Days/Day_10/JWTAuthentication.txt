housands of developers around the world use Node.js to develop I/O-intensive web applications, such as video streaming sites, single-page applications, online chat applications, and other web apps. The open-source (and completely free) platform offers several advantages over other server-side platforms, like Java or PHP. 


 What is JSON Web Token?
JSON Web Token (JWT) is a standard that defines a compact and self-contained way for securely transmitting information between parties as a JSON object.
 The compact size makes the tokens easy to transfer through an URL, POST parameter, or inside an HTTP header. 
The information in a JWT is digitally signed using a secret or public/private key pair.

JWTs can be signed using a secret or a public/private key pair.

JWTs are mainly used for authentication. After a user signs in to an application, the application then assigns JWT to that user. 
Subsequent requests by the user will include the assigned JWT. This token tells the server what routes, services, and resources the user is allowed to access

Advantages of Node.js authentication with JWT
Node.js authentication with JWT has several advantages over the traditional authentication process, primarily the scalability of stateless applications. 
And since it’s becoming popular among such heavyweights as Facebook and Google, it’s adoption across the industry likely will continue to grow. 


Other advantages include:

Simple verification through a JSON Web Token 
You can use an authentication service or outsource it
Provides more trustworthiness than cookies or sessions



The Need for JSON Web Token
There are several reasons why applications use JSON Web Tokens for authentication:

JWT is an excellent choice to be passed in HTML and HTTP environments due to its smaller footprint when compared to other types of tokens
JSON Web Tokens can be signed using a shared secret and also by using public/private key pairs
It is easier to work with JWT as JSON parsers are standard in most programming languages
JWT is also suitable for implementing authorization in large-scale web applications


Structure of a JWT

A JSON Web Token consists of:

Header – Consists of two parts: the type of token (i.e., JWT) and the signing algorithm (i.e., HS512)

Payload – Contains the claims that provide information about a user who has been authenticated along with other information such as token expiration time


Signature – Final part of a token that wraps in the encoded header and payload, along with the algorithm and a secret



JWT Use Cases

Some scenarios where JSON Web Tokens are useful:


Authorization - This is the most common scenario for using JWT. Once the user is logged in, each subsequent request will include the JWT, allowing the user to access routes, services, and resources that are permitted with that token.

Information Exchange - JSON Web Tokens are a good way of securely transmitting information between parties.

